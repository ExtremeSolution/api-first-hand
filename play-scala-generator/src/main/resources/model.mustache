{{if main_package_prefix}}package {{main_package_prefix}}
{{/if}}

{{for import in imports}}
    import {{import.name}}
{{/for}}
{{for import in binding_imports}}
    import {{import.name}}
{{/for}}

//noinspection ScalaStyle
package object {{main_package_suffix}} {

{{for alias in aliases}}
    type {{alias.name}} = {{alias.alias}}{{alias.underlying_type}}
{{/for}}

{{for enum in enums}}
    {{for leaf in enum.leaves}}
    val {{leaf.name}} = {{enum.name}}({{leaf.value}})
    {{/for}}
    implicit def stringTo{{enum.name}}(in: String): {{enum.name}} = in match {
    {{for leaf in enum.leaves}}
        case {{leaf.value}} => {{leaf.name}}
    {{/for}}
    }
{{/for}}
{{for binding in model_bindings}}
    {{binding.full_name}}
{{/for}}

}
//noinspection ScalaStyle
package {{main_package_suffix}} {

{{for trait in traits}}
    trait {{trait.abstract_name}} {
    {{for field in trait.fields}}
        def {{field.name}}: {{field.type_name}}
    {{/for}}
    }
{{/for}}

{{for class in classes}}
    case class {{class.name}}({{for field in class.fields}}{{field.name}}: {{field.type_name}}{{if field.isNotLast}}, {{/if}}{{/for}}) {{for trait in class.trait}}extends {{trait.name}}{{/for}}
{{/for}}

{{for enum in enums}}
    case class {{enum.name}}(value: {{enum.type_name}}) extends AnyVal
{{/for}}

}
